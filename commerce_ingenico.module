<?php

use Drupal\commerce_checkout\Plugin\Commerce\CheckoutFlow\CheckoutFlowWithPanesInterface;
use Drupal\commerce_ingenico\Plugin\Commerce\PaymentGateway\ECommerce;
use Drupal\commerce_payment\Entity\PaymentGateway;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function commerce_ingenico_form_commerce_checkout_flow_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();

  if ($form_object instanceof CheckoutFlowWithPanesInterface) {
    $visible_panes = $form_object->getVisiblePanes($form['#step_id']);

    $pane_id = 'payment_information';
    if (isset($visible_panes[$pane_id])) {
      /** @var \Drupal\commerce_payment\PaymentOption[] $payment_options */
      $payment_options = $form[$pane_id]['#payment_options'];

      $replacements = [];

      foreach ($payment_options as $payment_option_id => $payment_option) {
        $payment_gateway_id = $payment_option->getPaymentGatewayId();

        /** @var \Drupal\commerce_payment\Entity\PaymentGatewayInterface $payment_gateway */
        $payment_gateway = PaymentGateway::load($payment_gateway_id);
        if ($payment_gateway && ($payment_gateway->getPlugin() instanceof ECommerce)) {
          $config = $payment_gateway->getPluginConfiguration();
          if ($config['enable_ingenico_brands']) {
            // TODO Move?
            $form[$pane_id]['payment_method']['#access'] = TRUE;
            foreach ($config['ingenico_brands'] as $brand) {
              $replacements[$payment_option_id][$payment_option_id . '|' . $brand['PM'] . '|' . $brand['BRAND']] = $brand['title'];
            }
          }
        }
      }

      /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
      $order = $form_state->getFormObject()->getOrder();
      $pm = $order->getData('commerce_ingenico_PM');
      $brand = $order->getData('commerce_ingenico_BRAND');

      $new_payment_option_labels = [];
      foreach ($form[$pane_id]['payment_method']['#options'] as $payment_option_id => $label) {
        if (isset($replacements[$payment_option_id])) {
          foreach ($replacements[$payment_option_id] as $new_key => $new_label) {
            $new_payment_option_labels[$new_key] = $new_label;
            if (
              $form[$pane_id]['payment_method']['#default_value'] == $payment_option_id
              && $new_key == "$payment_option_id|$pm|$brand"
            ) {
              $form[$pane_id]['payment_method']['#default_value'] = $new_key;
            }
          }
        }
        else {
          $new_payment_option_labels[$payment_option_id] = $label;
        }
      }
      $form[$pane_id]['payment_method']['#options'] = $new_payment_option_labels;

      $new_payment_options = [];
      foreach ($payment_options as $payment_option_id => $payment_option) {
        if (isset($replacements[$payment_option_id])) {
          foreach ($replacements[$payment_option_id] as $new_key => $new_label) {
            $new_payment_options[$new_key] = clone $payment_option;
          }
        }
        else {
          $new_payment_options[$payment_option_id] = $payment_option;
        }
      }
      $form[$pane_id]['#payment_options'] = $new_payment_options;

      if ($replacements) {
        $form['#submit'] = array_merge(['commerce_ingenico_form_commerce_checkout_flow_submit'], $form['#submit']);
        $form['actions']['next']['#submit'] = array_merge(['commerce_ingenico_form_commerce_checkout_flow_submit'], $form['actions']['next']['#submit']);
      }
    }

    // Shows the selected Ingenico brand on order review page.
    if (isset($form['review'][$pane_id]['summary']['payment_gateway'])) {
      /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
      $order = $form_state->getFormObject()->getOrder();

      /** @var \Drupal\commerce_payment\Entity\PaymentGatewayInterface $payment_gateway */
      $payment_gateway = $order->get('payment_gateway')->entity;

      if ($payment_gateway->getPluginId() == 'ingenico_ecommerce') {
        $payment_gateway_config = $payment_gateway->getPluginConfiguration();
        if (!empty($payment_gateway_config['enable_ingenico_brands'])) {
          $pm = $order->getData('commerce_ingenico_PM');
          $brand = $order->getData('commerce_ingenico_BRAND');

          foreach ($payment_gateway_config['ingenico_brands'] as $option) {
            if ($option['PM'] == $pm && $option['BRAND'] == $brand) {
              $form['review'][$pane_id]['summary']['payment_gateway'] = [
                '#markup' => $option['title'],
              ];
            }
          }
        }
      }
    }
  }
}

function commerce_ingenico_form_commerce_checkout_flow_submit(&$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();

  if ($form_object instanceof CheckoutFlowWithPanesInterface) {
    $visible_panes = $form_object->getVisiblePanes($form['#step_id']);

    $pane_id = 'payment_information';
    if (isset($visible_panes[$pane_id])) {
      $values = $form_state->getValue($form[$pane_id]['#parents']);
      $payment_option_id = $values['payment_method'];
      /** @var \Drupal\commerce_payment\PaymentOption $payment_option */
      $payment_option = $form[$pane_id]['#payment_options'][$payment_option_id];
      $payment_gateway = PaymentGateway::load($payment_option->getPaymentGatewayId());
      if ($payment_gateway && ($payment_gateway->getPlugin() instanceof ECommerce)) {
        $config = $payment_gateway->getPluginConfiguration();
        if ($config['enable_ingenico_brands']) {
          $parts = explode('|', $payment_option_id);
          if (count($parts) == 3) {
            $order = $form_object->getOrder();
            $order->setData('commerce_ingenico_PM', $parts[1]);
            $order->setData('commerce_ingenico_BRAND', $parts[2]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Outputs the selected Ingenico brand in the order receipt mail.
 * Requires to be executed after preprocess on commerce_payment module.
 * So weight of the commerce_ingenico module must be bigger than
 * commerce_payment.
 */
function commerce_ingenico_preprocess_commerce_order_receipt(&$variables) {
  /** @var Drupal\commerce_order\Entity\OrderInterface $order */
  $order = $variables['order_entity'];
  /** @var \Drupal\commerce_payment\Entity\PaymentGatewayInterface $payment_gateway */
  $payment_gateway = $order->get('payment_gateway')->entity;

  if ($payment_gateway->getPluginId() == 'ingenico_ecommerce') {
    $payment_gateway_config = $payment_gateway->getPluginConfiguration();
    if (!empty($payment_gateway_config['enable_ingenico_brands'])) {
      $pm = $order->getData('commerce_ingenico_PM');
      $brand = $order->getData('commerce_ingenico_BRAND');

      foreach ($payment_gateway_config['ingenico_brands'] as $option) {
        if ($option['PM'] == $pm && $option['BRAND'] == $brand) {
          $variables['payment_method'] = $option['title'];
        }
      }
    }
  }
}
